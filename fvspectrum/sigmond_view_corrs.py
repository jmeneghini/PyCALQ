import numpy as np
import logging
from typing import NamedTuple
import os
import yaml
import xml.etree.ElementTree as ET
import pandas as pd

import sigmond
import fvspectrum.sigmond_data_handling.data_handler as data_handler
import fvspectrum.sigmond_data_handling.data_files
import fvspectrum.sigmond_util as sigmond_util
import general.plotting_handler as ph

doc = '''
preview_corrs - a task a read in and estimate/plot any Lattice QCD temporal correlator data files given

inputs
-------------
general:
  ensemble_id: cls21_c103       #required
  ensembles_file: /home/sarahski/latticeQCD/luscher-scmuscher/fvspectrum/sigmond_utils/ensembles.xml #generated by PyCALQ
  project_dir: /latticeQCD/raid3/sarahski/lqcd/C103_R005/test_pycalq_project #required
  sampling_info:                #not required 
  mode: Jackknife               #default Jackknife
  tweak_ensemble:               #not required
    omissions: []               #default []
    rebin: 1                    #default 1
preview_corrs:                  #required
  raw_data_files:               #required 
  - /latticeQCD/raid3/ahanlon/data/cls21_c103/updated_stats/sigmond.fwd/cls21_c103/nucleon_S0.bin
  create_pdfs: true             #not required #default true
  create_pickles: true          #not required #default true
  create_summary: true          #not required #default true
  figheight: 6                  #not required #default 6
  figwidth: 8                   #not required #default 8
  info: true                    #not required #default false
  plot: true                    #not required #default true
  write_data: true              #not required #default true
'''
      
class SigmondPreviewCorrs:

    @property
    def info(self):
        return doc

    def corr_data_file(self,corr):
        return os.path.join(self.proj_handler.data_dir(), f"{corr}_correlator_estimates.csv")

    def effen_data_file(self,corr):
        return os.path.join(self.proj_handler.data_dir(), f"{corr}_effenergy_estimates.csv")
    
    def corr_plot_file(self,corr, ptype):
        return os.path.join(self.proj_handler.plot_dir(f"{ptype}s"), f"{corr}_correlator.{ptype}")

    def effen_plot_file(self,corr, ptype):
        return os.path.join(self.proj_handler.plot_dir(f"{ptype}s"), f"{corr}_effenergy.{ptype}")
    
    @property
    def summary_file(self):
        return os.path.join(self.proj_handler.plot_dir(), f"{self.task_name}_summary") #add channel? project name?
    
    #initialize
    def __init__(self, task_name, proj_handler, general_params, task_params):
        self.task_name = task_name
        self.proj_handler = proj_handler

        if not task_params:
            logging.critical(f"No directory to view. Add 'raw_data_files' to '{task_name}' task parameters.")

        #check that raw_data_files are real files and not in project
        raw_data_files = []
        if 'raw_data_files' in task_params.keys():
            raw_data_files = task_params['raw_data_files']
        raw_data_files = sigmond_util.check_raw_data_files(raw_data_files, general_params['project_dir'])

        self.project_info = sigmond_util.setup_project(general_params,raw_data_files)
        
        #other params
        self.other_params = {
            'write_data': True,
            'create_pdfs': True,
            'create_pickles': True,
            'create_summary': True,
            'plot': True,
            'figwidth':8,
            'figheight':6,
        }
        sigmond_util.update_params(self.other_params,task_params) #update other_params with task_params, 
                                                                        #otherwise fill in missing task params

        if not self.other_params['create_pdfs'] and not self.other_params['create_pickles'] and not self.other_params['create_summary']:
            self.other_params['plot'] = False

        #these wont change, all correlators can and should be considered hermetian, 
        #       and time separation is a cosmetic parameter
        self.hermitian = True
        self.time_separation = 1

        #these can and will matter but only for special cases. Will need extra care when coding up. 
        #only coding up if we come across an instance of needing such
        self.subtract_vev = False
        self.vev_const = 0.0
        self.effective_energy_type = 0 #0=TimeForward, 1=TimeSymmetric, 2=TimeBackward?
        
        #make yaml output
        logging.info(f"Full input written to '{os.path.join(proj_handler.log_dir(), 'full_input.yml')}'.")
        with open( os.path.join(proj_handler.log_dir(), 'full_input.yml'), 'w+') as log_file:
            yaml.dump({"general":general_params, task_name: task_params}, log_file)

    def run(self):
        this_data_handler, mcobs_handler, mcobs_get_handler = sigmond_util.get_data_handlers(self.project_info)
        self.data_handler = this_data_handler

        ##get operators -> print to logfile
        log_path = os.path.join(self.proj_handler.log_dir(), 'ops_log.yml')
        ops_list = {}
        ops_list["channels"] = {str(channel):{"operators":[str(op) for op in self.data_handler.getChannelOperators(channel)]} for channel in self.data_handler.raw_channels }
        
        logging.info(f"Channels and operators list written to '{log_path}'.")
        with open(log_path, 'w+') as log_file:
            yaml.dump(ops_list, log_file)
        
        save_to_self = not self.other_params['write_data'] and self.other_params['plot']
        if save_to_self:
            self.data = {}
        
        if not self.other_params['write_data'] and not self.other_params['plot']:
            logging.warning("You have set 'write_data' to 'False' and 'plot' to 'False' thus making this task obsolete. Congrats.")
            return

        logging.info(f"Saving correlator estimates to directory {self.proj_handler.data_dir()}...")
        for channel in self.data_handler.raw_channels:
            if save_to_self:
                self.data[channel] = {}
            for op1 in self.data_handler.getChannelOperators(channel):
                if save_to_self:
                    self.data[channel][op1] = {}
                for op2 in self.data_handler.getChannelOperators(channel):
                    corr = sigmond.CorrelatorInfo(op1.operator_info,op2.operator_info)
                    corr_name = repr(corr).replace(" ","-")
                    estimates = sigmond.getCorrelatorEstimates(mcobs_handler,corr,self.hermitian,self.subtract_vev,sigmond.ComplexArg.RealPart, 
                                                               self.project_info.sampling_info.getSamplingMode())
                    if save_to_self:
                        self.data[channel][op1][op2] = {}
                        self.data[channel][op1][op2]["corr"] = sigmond_util.estimates_to_df(estimates)
                    else:
                        sigmond_util.estimates_to_csv(estimates, self.corr_data_file(corr_name) )
                    estimates = sigmond.getEffectiveEnergy(mcobs_handler,corr,self.hermitian,self.subtract_vev,sigmond.ComplexArg.RealPart, 
                                                           self.project_info.sampling_info.getSamplingMode(),self.time_separation,self.effective_energy_type,self.vev_const)
                    if save_to_self:
                        self.data[channel][op1][op2]["effen"] = sigmond_util.estimates_to_df(estimates)
                    else:
                        sigmond_util.estimates_to_csv(estimates, self.effen_data_file(corr_name) )



    def plot(self):
        #make plot for each correlator -> save to pickle and pdf
        if self.other_params['plot']:
            logging.info(f"Saving plots to directory {self.proj_handler.plot_dir()}...")
        else:
            logging.info(f"No plots requested.")
            return
        
        plh = ph.PlottingHandler()
        if self.other_params['create_summary']:
            plh.create_summary_doc("Preview Data")

        #set up fig object to reuse
        plh.create_fig(self.other_params['figwidth'], self.other_params['figheight'])
        
        #loop through same channels #make loading bar
        for channel in self.data_handler.raw_channels:
            if self.other_params['create_summary']:
                plh.append_section(str(channel))
            for op1 in self.data_handler.getChannelOperators(channel):
                for op2 in self.data_handler.getChannelOperators(channel):
                    corr = sigmond.CorrelatorInfo(op1.operator_info,op2.operator_info)
                    corr_name = repr(corr).replace(" ","-")
                    if not self.other_params['write_data'] and self.other_params['plot']:
                        df = self.data[channel][op1][op2]["corr"]
                    else:
                        df = pd.read_csv(self.corr_data_file(corr_name))

                    plh.clf()
                    plh.correlator_plot(df, 0, op1, op2) #0 for regular corr plot

                    if self.other_params['create_pickles']:
                        plh.save_pickle(self.corr_plot_file( corr_name, "pickle"))
                    if self.other_params['create_pdfs'] or self.other_params['create_summary']:
                        plh.save_pdf(self.corr_plot_file( corr_name, "pdf"))

                    if not self.other_params['write_data'] and self.other_params['plot']:
                        df = self.data[channel][op1][op2]["effen"]
                    else:
                        df = pd.read_csv(self.effen_data_file(corr_name))

                    plh.clf()
                    plh.correlator_plot(df, 1, op1, op2) #1 for effective energy plot

                    if self.other_params['create_pickles']:
                        plh.save_pickle(self.effen_plot_file( corr_name, "pickle"))
                    if self.other_params['create_pdfs'] or self.other_params['create_summary']:
                        plh.save_pdf( self.effen_plot_file(corr_name, "pdf")) 

                    if self.other_params['create_summary']:
                        plh.add_correlator_subsection(repr(corr),self.corr_plot_file( corr_name, "pdf"),
                                                        self.effen_plot_file( corr_name, "pdf"))

        if self.other_params['create_summary']:
            plh.compile_pdf(self.summary_file) 

